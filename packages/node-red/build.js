#!/usr/bin/env bun

import path from 'path';
import { rm, mkdir, readdir, stat } from 'fs/promises';

const SRC_DIR = path.resolve(import.meta.dir, 'src');
const LOCALES_DIR = path.resolve(import.meta.dir, 'locales');
const DOCS_DIR = path.resolve(import.meta.dir, 'docs');
const DIST_DIR = path.resolve(import.meta.dir, 'dist');

const packageJsonPath = path.resolve(import.meta.dir, 'package.json');
const packageJson = await Bun.file(packageJsonPath).json();

const nodePrefix = packageJson.name?.split('-').pop();
if (!nodePrefix)
	throw new Error(`Could not determine node prefix from package name: ${packageJson.name}`);

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø—É—Ç–∏.
 * @param {string} dirPath - –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
 * @returns {Promise<boolean>}
 */
async function dirExists(dirPath) {
	try {
		const stats = await stat(dirPath);
		return stats.isDirectory();
	} catch (error) {
		if (error.code === 'ENOENT')
			return false;
		throw error;
	}
};

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–±–æ—Ä–∫—É –æ–¥–Ω–æ–≥–æ —É–∑–ª–∞ Node-RED –ø–æ –µ–≥–æ –∏–º–µ–Ω–∏.
 * @param {string} nodeName - –ò–º—è —É–∑–ª–∞ (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–º–µ–Ω–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –≤ `src/nodes`).
 * @returns {Promise<void>}
 */
async function buildNode(nodeName) {
	const nodeSrcDir = path.join(SRC_DIR, 'nodes', nodeName);
	const nodeDistDir = path.join(DIST_DIR, 'nodes');

	// 1. –°–±–æ—Ä–∫–∞ JS –¥–ª—è runtime (Node.js)
	const runtimeSrc = path.join(nodeSrcDir, 'runtime.js');
	if (await Bun.file(runtimeSrc).exists()) {
		const buildResult = await Bun.build({
			entrypoints: [runtimeSrc],
			outdir: nodeDistDir,
			naming: `${nodeName}.js`,
			packages: 'external',
			target: 'node',
			minify: true
		});
		if (buildResult.success)
			console.log(`‚úÖ Built ${nodeName}.js`);
		else
			console.error(`‚ùå Build failed for ${nodeName}.js:`, buildResult.logs);
	}

	// 2. –°–±–æ—Ä–∫–∞ HTML-—á–∞—Å—Ç–∏ (UI)
	const finalHtmlParts = [];

	// 2a. –°–±–æ—Ä–∫–∞ UI-—Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
	const uiSrc = path.join(nodeSrcDir, 'ui.js');
	if (await Bun.file(uiSrc).exists()) {
		const buildResult = await Bun.build({
			entrypoints: [uiSrc],
			target: 'browser',
			minify: {
				syntax: true,
				whitespace: true
			}
		});
		if (buildResult.success) {
			const [artifact] = buildResult.outputs;
			const content = await artifact.text();
			finalHtmlParts.push(`<script type="text/javascript">\n${content}</script>`);
		} else
			console.error(`‚ùå Build failed for ${nodeName}/ui.js:`, buildResult.logs);
	}

	// 2b. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ HTML-—à–∞–±–ª–æ–Ω–∞
	const templateSrc = path.join(nodeSrcDir, 'template.html');
	if (await Bun.file(templateSrc).exists()) {
		const content = await Bun.file(templateSrc).text();
		finalHtmlParts.push(`<script type="text/html" data-template-name="${nodePrefix}-${nodeName}">\n${content}</script>`);
	}

	// 2c. –ó–∞–ø–∏—Å—å –∏—Ç–æ–≥–æ–≤–æ–≥–æ .html —Ñ–∞–π–ª–∞
	if (finalHtmlParts.length > 0) {
		const htmlDest = path.join(nodeDistDir, `${nodeName}.html`);
		await Bun.write(htmlDest, finalHtmlParts.join('\n\n'));
		console.log(`üì¶ Assembled ${nodeName}.html`);
	}

	// 3. –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫
	const iconSrcDir = path.join(nodeSrcDir, 'icons');
	if (await dirExists(iconSrcDir)) {
		const iconDistDir = path.join(nodeDistDir, 'icons');
		await mkdir(iconDistDir, { recursive: true });

		const glob = new Bun.Glob(path.join(iconSrcDir, '*'));
		for await (const file of glob.scan()) {
			const dest = path.join(iconDistDir, path.basename(file));
			await Bun.write(dest, Bun.file(file));
		}
		console.log(`üé® Copied icons for ${nodeName}`);
	}
};

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (.md) –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤.
 * @param {string[]} nodeNames - –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≤—Å–µ—Ö —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö —É–∑–ª–æ–≤.
 * @returns {Promise<void>}
 */
async function copyAllDocs(nodeNames) {
	if (!(await dirExists(DOCS_DIR)))
		return;
	let copied = false;
	const langDirEntries = await readdir(DOCS_DIR, { withFileTypes: true });
	for (const dirent of langDirEntries) {
		if (!dirent.isDirectory())
			continue;
		const lang = dirent.name;
		const localeDistDir = path.join(DIST_DIR, 'nodes', 'locales', lang);
		for (const nodeName of nodeNames) {
			const docSrc = path.join(DOCS_DIR, lang, 'nodes', `${nodeName}.md`);
			if (await Bun.file(docSrc).exists()) {
				await mkdir(localeDistDir, { recursive: true });
				const dest = path.join(localeDistDir, `${nodeName}.html`);
				const content = await Bun.file(docSrc).text();
				await Bun.write(dest, `<script type="text/markdown" data-help-name="${nodePrefix}-${nodeName}" data-lang="${lang}">\n${content}</script>`);
				copied = true;
			}
		}
	}
	if (copied)
		console.log('üåç Copied docs files.');
};

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –∏ –∫–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª—ã –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ (.json) –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤.
 * @param {string[]} nodeNames - –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –≤—Å–µ—Ö —Å–æ–±–∏—Ä–∞–µ–º—ã—Ö —É–∑–ª–æ–≤.
 * @returns {Promise<void>}
 */
async function copyAllLocales(nodeNames) {
	if (!(await dirExists(LOCALES_DIR)))
		return;
	let copied = false;
	const langDirEntries = await readdir(LOCALES_DIR, { withFileTypes: true });
	for (const dirent of langDirEntries) {
		if (!dirent.isDirectory())
			continue;
		const lang = dirent.name;
		const langPath = path.join(LOCALES_DIR, lang);
		const localeDistDir = path.join(DIST_DIR, 'nodes', 'locales', lang);
		for (const nodeName of nodeNames) {
			const localeSrc = path.join(langPath, `${nodeName}.json`);
			if (await Bun.file(localeSrc).exists()) {
				await mkdir(localeDistDir, { recursive: true });
				const dest = path.join(localeDistDir, `${nodeName}.json`);
				await Bun.write(dest, Bun.file(localeSrc));
				copied = true;
			}
		}
	}
	if (copied)
		console.log('üåç Copied locale files.');
};

export default async function build() {
	console.time('‚ú® Build complete');
	console.log(`üì¶ Using node prefix: "${nodePrefix}"`);

	await rm(DIST_DIR, { recursive: true, force: true });
	console.log(`üßπ Cleaned ${DIST_DIR} directory.`);

	const distNodesDir = path.join(DIST_DIR, 'nodes');
	await mkdir(distNodesDir, { recursive: true });

	const nodesSrcDir = path.join(SRC_DIR, 'nodes');
	if (!(await dirExists(nodesSrcDir))) {
		console.warn(`‚ö†Ô∏è  Source directory for nodes not found at ${nodesSrcDir}. Nothing to build.`);
		return;
	}

	const nodeDirEntries = await readdir(nodesSrcDir, { withFileTypes: true });
	const nodeNames = nodeDirEntries
		.filter(dirent => dirent.isDirectory())
		.map(dirent => dirent.name);

	if (nodeNames.length === 0) {
		console.log('ü§∑ No nodes found to build.');
		return;
	}

	console.log(`üîç Found ${nodeNames.length} nodes: ${nodeNames.join(', ')}`);

	await Promise.all([
		...nodeNames.map(buildNode),
		copyAllDocs(nodeNames),
		copyAllLocales(nodeNames)
	]);

	console.timeEnd('‚ú® Build complete');
};

if (import.meta.path === Bun.main)
	build();
