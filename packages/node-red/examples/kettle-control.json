[{"id":"init-subscription","type":"inject","z":"a1b2c3d4e5f6a7b8","name":"Subscription","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":"1","topic":"subscription","x":110,"y":100,"wires":[["3cb48b40878a4957"]]},{"id":"kettle-subscribe","type":"xmihome-device","z":"a1b2c3d4e5f6a7b8","settings":"e7713296f5f01d59","name":"Subscription Kettle Status","device":"device","deviceType":"msg","action":"subscribe","property":"status","propertyType":"str","value":"","valueType":"str","topic":"topic","topicType":"msg","x":450,"y":100,"wires":[["kettle-logic","f7e00ceaf3ba4af1"],["error-filter"]]},{"id":"kettle-logic","type":"function","z":"a1b2c3d4e5f6a7b8","name":"Kettle Logic","func":"const state = context.get('state') || {};\nconst SAFE_TEMP = 40; // Standard safe temperature for cooling mode\nconst HEAT_TEMP = 80; // Standard heating and restore temperature\n\n// --- Helper function to update all statuses consistently ---\nfunction updateAllOutputs(fill, shape, status_text, temp, action, armed) {\n    node.status({ fill: fill, shape: shape, text: status_text });\n    node.send([null, { payload: temp }, { payload: action }, { payload: armed }]);\n}\n\n// --- INITIALIZATION ---\nif (state.initialized !== true) {\n    node.log('Initializing Kettle Logic State');\n    state.kettle_armed = false;\n    state.heating_request = false;\n    state.target_temperature = HEAT_TEMP;\n    state.last_physical_press_ts = 0;\n    state.initialized = true;\n    context.set('state', state);\n    updateAllOutputs('grey', 'ring', 'Initializing...', '--', 'Initializing...', 'Unknown');\n}\n\nlet device = msg.device;\n\n// --- 1. PROCESS COMMANDS & INPUTS ---\n\nif (msg.topic === 'restore_and_unsubscribe') {\n    node.log(`Generating restore command to HEAT_TEMP: ${HEAT_TEMP}째C`);\n    const restore_command = {\n        property: 'keep_warm_settings',\n        value: { temperature: HEAT_TEMP, type: 'heat_to_temperature' }\n    };\n    node.send([{ device, payload: restore_command, topic: msg.topic }, null, null, null]);\n    return null; \n}\n\nif (msg.topic === 'force_disconnect_status') {\n    node.log('Forcing disconnected status display.');\n    state.initialized = false; // Force re-init on next subscription\n    context.set('state', state);\n    flow.set('kettle_last_status', null);\n    updateAllOutputs('red', 'ring', 'Disconnected', '--', 'Disconnected', 'Disconnected');\n    return null;\n}\n\nconst isStatusUpdate = msg.payload && typeof msg.payload === 'object' && 'action' in msg.payload && 'mode' in msg.payload;\n\nif (msg.topic === 'heat_water') {\n    if (state.kettle_armed) {\n        state.heating_request = true;\n        state.target_temperature = HEAT_TEMP;\n    } else {\n        node.warn(\"Command ignored: Kettle is not armed. Press 'Warm' button first.\");\n    }\n} else if (msg.topic === 'stop_heating') {\n    node.log('Node-RED command: stop_heating');\n    state.heating_request = false;\n} else if (isStatusUpdate) {\n    const status = msg.payload;\n    flow.set('kettle_last_status', status);\n    \n    const was_armed = state.kettle_armed;\n    state.kettle_armed = (status.mode === 'keep_warm');\n    const now = Date.now();\n\n    if (state.kettle_armed && !was_armed) {\n        if (now - state.last_physical_press_ts < 2000) {\n            node.log('Physical double-press detected, starting heating cycle.');\n            state.heating_request = true;\n            state.target_temperature = status.keep_warm_set_temperature > SAFE_TEMP ? status.keep_warm_set_temperature : HEAT_TEMP;\n        }\n        state.last_physical_press_ts = now;\n    } else if (!state.kettle_armed && was_armed) {\n        state.heating_request = false;\n        state.last_physical_press_ts = now;\n    }\n}\n\ncontext.set('state', state);\n\n// --- 2. DECISION LOGIC & STATUS UPDATE --- \nlet command_to_send = null;\nlet current_status = flow.get('kettle_last_status');\n\nif (current_status) {\n    const temp = current_status.current_temperature;\n    const action = current_status.action;\n    const armed_text = state.kettle_armed ? 'Armed' : 'Disarmed';\n    let status_fill = state.kettle_armed ? 'green' : 'grey';\n    let status_text = `${armed_text} | ${action} | ${temp}째C`;\n\n    if (state.heating_request) {\n        status_text = `Heating to ${state.target_temperature}째C (${temp}째C)`;\n        status_fill = 'blue';\n        if (current_status.keep_warm_type !== 'heat_to_temperature' || current_status.keep_warm_set_temperature !== state.target_temperature) {\n            command_to_send = { property: 'keep_warm_settings', value: { temperature: state.target_temperature, type: 'heat_to_temperature' } };\n        }\n    } else {\n        if (msg.topic === 'stop_heating' || !state.kettle_armed) {\n             if (current_status.keep_warm_type !== 'boil_and_cool_down' || current_status.keep_warm_set_temperature !== SAFE_TEMP) {\n                command_to_send = { property: 'keep_warm_settings', value: { temperature: SAFE_TEMP, type: 'boil_and_cool_down' } };\n            }\n        }\n    }\n\n    if (state.heating_request && action === 'keeping_warm' && temp >= state.target_temperature) {\n        state.heating_request = false;\n        command_to_send = { property: 'keep_warm_settings', value: { temperature: SAFE_TEMP, type: 'boil_and_cool_down' } };\n    }\n    \n    updateAllOutputs(status_fill, 'dot', status_text, temp, action, armed_text);\n}\n\n// --- 3. SEND COMMAND --- \nif (command_to_send) {\n    node.send([{ device, payload: command_to_send, topic: msg.topic }, null, null, null]);\n}\n\nreturn null;","outputs":4,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":200,"wires":[["set-kettle-property"],["debug-temp"],["debug-action"],["debug-armed"]]},{"id":"set-kettle-property","type":"xmihome-device","z":"a1b2c3d4e5f6a7b8","settings":"e7713296f5f01d59","name":"Set Kettle Property","device":"device","deviceType":"msg","action":"setProperty","property":"payload.property","propertyType":"msg","value":"payload.value","valueType":"msg","topic":"topic","topicType":"msg","x":650,"y":200,"wires":[["c26359371fce841d","d662877179a61d6e"],[]]},{"id":"heat-to-80","type":"inject","z":"a1b2c3d4e5f6a7b8","name":"Heat Water","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"heat_water","x":100,"y":260,"wires":[["3cb48b40878a4957"]]},{"id":"stop-heating","type":"inject","z":"a1b2c3d4e5f6a7b8","name":"Stop Heating","props":[{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"stop_heating","x":110,"y":320,"wires":[["3cb48b40878a4957"]]},{"id":"error-filter","type":"switch","z":"a1b2c3d4e5f6a7b8","name":"Error Filter","property":"payload.event","propertyType":"msg","rules":[{"t":"eq","v":"error","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":130,"y":40,"wires":[["reconnect-delay"]]},{"id":"debug-temp","type":"debug","z":"a1b2c3d4e5f6a7b8","name":"Temperature","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":610,"y":380,"wires":[]},{"id":"debug-action","type":"debug","z":"a1b2c3d4e5f6a7b8","name":"Action","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":590,"y":440,"wires":[]},{"id":"debug-armed","type":"debug","z":"a1b2c3d4e5f6a7b8","name":"Armed State","active":true,"tosidebar":false,"console":false,"tostatus":true,"complete":"payload","targetType":"msg","statusVal":"payload","statusType":"auto","x":610,"y":500,"wires":[]},{"id":"3cb48b40878a4957","type":"change","z":"a1b2c3d4e5f6a7b8","name":"device","rules":[{"t":"set","p":"device","pt":"msg","to":"{ \"mac\": $env('mac'), \"token\": $env('token'), \"model\": \"yunmi.kettle.v2\" }","tot":"jsonata"}],"action":"","property":"","from":"","to":"","reg":false,"x":270,"y":200,"wires":[["3a0611db7d2094de"]]},{"id":"3a0611db7d2094de","type":"switch","z":"a1b2c3d4e5f6a7b8","name":"topic router","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"subscription","vt":"str"},{"t":"else"}],"checkall":"false","repair":false,"outputs":2,"x":260,"y":140,"wires":[["kettle-subscribe"],["kettle-logic"]]},{"id":"3c626b36cb443596","type":"inject","z":"a1b2c3d4e5f6a7b8","name":"Unsubscribe","props":[{"p":"topic","v":"restore_and_unsubscribe","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"restore_and_unsubscribe","x":110,"y":160,"wires":[["3cb48b40878a4957"]]},{"id":"493bdf6233c373df","type":"xmihome-device","z":"a1b2c3d4e5f6a7b8","settings":"e7713296f5f01d59","name":"Unsubscription Kettle Status","device":"device","deviceType":"msg","action":"unsubscribe","property":"status","propertyType":"str","value":"","valueType":"str","topic":"topic","topicType":"msg","x":600,"y":300,"wires":[[],[]]},{"id":"reconnect-delay","type":"delay","z":"a1b2c3d4e5f6a7b8","name":"Reconnect Delay","pauseType":"delay","timeout":"30","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":330,"y":40,"wires":[["1f3160aedb50eac4"]]},{"id":"1f3160aedb50eac4","type":"change","z":"a1b2c3d4e5f6a7b8","name":"subscription","rules":[{"t":"set","p":"topic","pt":"msg","to":"subscription","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":510,"y":40,"wires":[["3cb48b40878a4957"]]},{"id":"c26359371fce841d","type":"switch","z":"a1b2c3d4e5f6a7b8","name":"if unsubscription","property":"topic","propertyType":"msg","rules":[{"t":"eq","v":"restore_and_unsubscribe","vt":"str"}],"checkall":"true","repair":false,"outputs":1,"x":640,"y":260,"wires":[["493bdf6233c373df","set-disconnect-status"]]},{"id":"set-disconnect-status","type":"change","z":"a1b2c3d4e5f6a7b8","name":"Set Disconnect Status","rules":[{"t":"set","p":"topic","pt":"msg","to":"force_disconnect_status","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":620,"y":340,"wires":[["3cb48b40878a4957"]]},{"id":"f7e00ceaf3ba4af1","type":"debug","z":"a1b2c3d4e5f6a7b8","name":"debug 1","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":710,"y":100,"wires":[]},{"id":"d662877179a61d6e","type":"debug","z":"a1b2c3d4e5f6a7b8","name":"debug 2","active":true,"tosidebar":true,"console":true,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":710,"y":140,"wires":[]},{"id":"e7713296f5f01d59","type":"xmihome-config","name":"ble","debug":true,"connectionType":"bluetooth"}]