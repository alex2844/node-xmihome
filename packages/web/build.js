#!/usr/bin/env bun

import path from 'path';
import { rm } from 'fs/promises';
/** @import { BuildConfig, BunPlugin } from 'bun' */

const SRC_DIR = path.resolve(import.meta.dir, 'src');
const DIST_DIR = path.resolve(import.meta.dir, 'dist');

/**
 * –ü–ª–∞–≥–∏–Ω Bun –¥–ª—è "–ø–æ–¥–º–µ–Ω—ã" –∏–º–ø–æ—Ä—Ç–æ–≤ –≤–æ –≤—Ä–µ–º—è —Å–±–æ—Ä–∫–∏ –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞.
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –∫–æ–¥ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–∏–∑ `xmihome-devices`),
 * –∫–æ—Ç–æ—Ä—ã–π –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç 'xmihome/device.js', –ø–æ–¥–º–µ–Ω—è—è –µ–≥–æ –Ω–∞ –ª–µ—Ç—É –Ω–∞ –±—Ä–∞—É–∑–µ—Ä–Ω—É—é –≤–µ—Ä—Å–∏—é.
 * @type {BunPlugin}
 */
const aliasPlugin = {
	name: 'alias-plugin',
	setup(build) {
		const browserDevicePath = path.join(SRC_DIR, 'device.js');
		build.onResolve({ filter: /^xmihome\/device\.js$/ }, () => {
			return { path: browserDevicePath };
		});
		build.onResolve({ filter: /^crypto$/ }, (args) => ({
			path: args.path,
			namespace: 'crypto-stub',
		}));
		build.onLoad({ filter: /.*/, namespace: 'crypto-stub' }, () => ({
			contents: `
				export default {
					randomBytes: (size) => window.crypto.getRandomValues(new Uint8Array(size))
				};
			`,
			loader: 'js',
		}));
	}
};

/**
 * –ü–ª–∞–≥–∏–Ω Bun –¥–ª—è –≤–Ω–µ–¥—Ä–µ–Ω–∏—è –ø–æ–ª–∏—Ñ–∏–ª–ª–æ–≤, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö npm-–ø–∞–∫–µ—Ç–æ–≤ –≤ –±—Ä–∞—É–∑–µ—Ä–µ.
 * @type {BunPlugin}
 */
const polyfillPlugin = {
	name: 'polyfill-plugin',
	setup(build) {
		build.onLoad({ filter: /main\.js$/ }, async (args) => {
			const content = await Bun.file(args.path).text();
			const contents = [
				`import { Buffer } from 'buffer';`,
				'window.Buffer = Buffer;',
				'window.global = window;',
				content
			].join('\n');
			return { contents, loader: 'js' };
		});
	}
};

/**
 * –û–ø—Ü–∏–∏ —Å–±–æ—Ä–∫–∏, –æ–±—â–∏–µ –¥–ª—è dev –∏ build —Ä–µ–∂–∏–º–æ–≤.
 * @type {BuildConfig}
 */
const buildOptions = {
	entrypoints: [path.join(SRC_DIR, 'main.js')],
	target: 'browser',
	plugins: [aliasPlugin, polyfillPlugin]
};

export async function server() {
	console.log('üöÄ Starting development server with live reload...');
	Bun.serve({
		port: 3000,
		async fetch(req) {
			const url = new URL(req.url);
			const pathname = url.pathname;
			console.log(`[DevServer] ${req.method} ${pathname}`);
			if (pathname === '/dist/bundle.js') {
				const build = await Bun.build({
					...buildOptions,
					sourcemap: 'inline'
				});
				return new Response(build.outputs[0]);
			}
			if (url.pathname === '/')
				return new Response(Bun.file('./index.html'));
			if (url.pathname.startsWith('/public/'))
				return new Response(Bun.file(`.${url.pathname}`));
			return new Response('Not Found', { status: 404 });
		},
		error() {
			return new Response(null, { status: 404 });
		}
	});
	console.log('‚úÖ Server listening on http://localhost:3000');
};

export default async function build() {
	console.time('‚ú® Build complete');

	await rm(DIST_DIR, { recursive: true, force: true });
	console.log(`üßπ Cleaned ${DIST_DIR} directory.`);

	const result = await Bun.build({
		...buildOptions,
		outdir: DIST_DIR,
		naming: 'bundle.js',
		minify: true
	});
	if (result.success)
		console.log(`‚úÖ Web build successful! Output: ${DIST_DIR}/bundle.js`);
	else {
		console.error(`‚ùå Build failed:`, result.logs);
		process.exit(1);
	}
	console.timeEnd('‚ú® Build complete');
};

if (import.meta.path === Bun.main) {
	if (process.env.npm_lifecycle_event === 'dev')
		server();
	else
		build();
}
