#!/usr/bin/env bash
set -euo pipefail

# -- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø --
# –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞: "gemini" –∏–ª–∏ "openrouter"
readonly API_PROVIDER="${API_PROVIDER:-gemini}"

# –£–∫–∞–∂–∏—Ç–µ ID –º–æ–¥–µ–ª–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–º
# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è Gemini: "gemini-2.5-pro"
# –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è OpenRouter: "qwen/qwen3-coder:free", "openai/gpt-4o", "anthropic/claude-3-opus"
readonly MODEL_ID="${MODEL_ID:-gemini-2.5-pro}"

# -- –§–ê–ô–õ–´ –ò –ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø --
readonly PROMPT_FILE="docs/prompts/docs.md"
readonly OUTPUT_SCRIPT="scripts/docs_apply.sh"
readonly EXCLUDE_FILES_PATTERNS=("LICENSE" ".gitignore" "${PROMPT_FILE}" "${OUTPUT_SCRIPT}" "${0#./}")

function error() {
	echo "‚ùå –û—à–∏–±–∫–∞: $1" >&2
	exit 1
}

function check_deps() {
	local missing_deps=0
	for dep in git curl jq; do
		if ! command -v "${dep}" &>/dev/null; then
			echo "‚ùå –£—Ç–∏–ª–∏—Ç–∞ '${dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞." >&2
			missing_deps=1
		fi
	done
	if [[ ${missing_deps} -eq 1 ]]; then
		exit 1
	fi
}

function list_project_files() {
	git ls-files -c --others --exclude-standard
}

function process_file() {
	local relative_path="$1"
	echo "--- BEGIN FILE: ${relative_path} ---"

	local encoding=$(file -L -b --mime-encoding "${relative_path}")
	if [[ "${encoding}" == "binary" ]]; then
		echo "[Binary file, content not displayed]"
	else
		cat "${relative_path}" || echo "[Could not read file]"
	fi

	echo "--- END FILE: ${relative_path} ---"
	echo
}

function main() {
	echo "üîç –†–∞–±–æ—Ç–∞–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞: ${PWD}"
	check_deps

	if [[ ! -f "${PROMPT_FILE}" ]]; then
		error "–§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: '${PROMPT_FILE}'"
	fi

	echo "üì¶ –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–º—è—Ç—å..."
	local prompt_content=$(<"${PROMPT_FILE}")
	local project_context=""
	while IFS= read -r relative_path; do
		[[ -z "${relative_path}" ]] && continue
		local should_skip=false
		for pattern in "${EXCLUDE_FILES_PATTERNS[@]}"; do
			if [[ "${relative_path}" == ${pattern} ]]; then
				should_skip=true
				break
			fi
		done
		[[ "${should_skip}" == true ]] && continue
		project_context+="$(process_file "${relative_path}")"
	done < <(list_project_files | sort)
	echo "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω. –û–±—ä–µ–º: $(echo -n "${project_context}" | wc -c) –±–∞–π—Ç."

	echo "üß† –ì–æ—Ç–æ–≤–∏–º –∑–∞–ø—Ä–æ—Å –¥–ª—è '${API_PROVIDER}' (–º–æ–¥–µ–ª—å: ${MODEL_ID})..."
	local api_url=""
	local request_json=""
	local jq_parser_path=""
	local -a curl_headers=()

	case "${API_PROVIDER}" in
		gemini)
			if [[ -z "${GEMINI_API_KEY:-}" ]]; then
				error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
			fi
			curl_headers=("-H" "Content-Type: application/json")
			api_url="https://generativelanguage.googleapis.com/v1beta/models/${MODEL_ID}:generateContent?key=${GEMINI_API_KEY}"
			jq_parser_path='.candidates[0].content.parts[0].text'
			request_json=$(echo "${project_context}" | jq -Rs \
				--arg prompt_content "${prompt_content}" \
				'{
					"contents": [{
						"parts": [
							{"text": $prompt_content},
							{"text": .}
						]
					}],
					"generationConfig": { "responseMimeType": "text/plain" }
				}'
			)
		;;
		openrouter)
			if [[ -z "${OPENROUTER_API_KEY:-}" ]]; then
				error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è OPENROUTER_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
			fi
			curl_headers+=("-H" "Content-Type: application/json")
			curl_headers+=("-H" "Authorization: Bearer ${OPENROUTER_API_KEY}")
			api_url="https://openrouter.ai/api/v1/chat/completions"
			jq_parser_path='.choices[0].message.content'
			request_json=$(echo "${project_context}" | jq -Rs \
				--arg model "${MODEL_ID}" \
				--arg prompt_content "${prompt_content}" \
				'{
					"model": $model,
					"messages": [
						{"role": "system", "content": $prompt_content},
						{"role": "user", "content": .}
					]
				}'
			)
		;;
		*) error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API_PROVIDER: '${API_PROVIDER}'. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 'gemini' –∏–ª–∏ 'openrouter'.";;
	esac

	if ! [[ -n "${request_json}" ]]; then
		error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JSON –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ–º–æ—â—å—é jq."
	fi
	
	echo "üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ ${API_PROVIDER}... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
	local response
	if ! response=$(echo "${request_json}" | curl -s -X POST "${curl_headers[@]}" --data-binary @- "${api_url}" 2>&1); then
		error "–ó–∞–ø—Ä–æ—Å –∫ ${API_PROVIDER} API –Ω–µ —É–¥–∞–ª—Å—è. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${response}"
	fi
	if ! echo "${response}" | jq -e "${jq_parser_path}" > /dev/null; then
		error "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç ${API_PROVIDER} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–µ–∫—Å—Ç). –û—Ç–≤–µ—Ç API:\n${response}"
	fi

	local generated_script=$(echo "${response}" | jq -r "${jq_parser_path}" \
		| sed -e '1s/^```\(bash\|sh\)$//' -e '$s/^```$//' \
		| sed -e '/./,$!d' \
		| tee "${OUTPUT_SCRIPT}"
	)
	
	if [[ -z "${generated_script}" ]]; then
		error "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –æ—Ç ${API_PROVIDER}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç API:\n${response}"
	fi

	chmod +x "${OUTPUT_SCRIPT}"
	echo "üéâ –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${OUTPUT_SCRIPT}"
}

main "$@"
