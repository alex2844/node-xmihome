#!/usr/bin/env bash
set -euo pipefail

function usage() {
	echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [-t <tag>] [-o <output_file>] [-h]"
	echo "  -t <tag>            –¢–µ–≥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è changelog (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥)."
	echo "  -o <output_file>    –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω)."
	echo "  -h                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
}

function error() {
	echo "‚ùå –û—à–∏–±–∫–∞: $1" >&2
	exit 1
}

function check_deps() {
	local missing_deps=0
	for dep in jq git curl awk; do
		if ! command -v "${dep}" &>/dev/null; then
			echo "‚ùå –£—Ç–∏–ª–∏—Ç–∞ '${dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞." >&2
			missing_deps=1
		fi
	done
	if [[ ${missing_deps} -eq 1 ]]; then
		exit 1
	fi
}

function get_commits() {
	local include_pattern="$1"
	local exclude_pattern="${2:-}"
	local all_commits="$3"
	local commits=$(echo "${all_commits}" | grep -E "${include_pattern}" || true)
	if [[ -n "${exclude_pattern}" ]]; then
		commits=$(echo "${commits}" | grep -E -v "${exclude_pattern}" || true)
	fi
	[[ -n "${commits}" ]] && echo "${commits}"
}

function main() {
	local output_file=""
	local target_tag_arg=""

	while getopts ":o:t:h" opt; do
		case ${opt} in
			o ) output_file=${OPTARG};;
			t ) target_tag_arg=${OPTARG};;
			h ) usage; exit 0;;
			\? ) error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥: -${OPTARG}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -h –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏." ;;
			: ) error "–§–ª–∞–≥ -${OPTARG} —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç (–∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–≥–∞)." ;;
		esac
	done

	check_deps

	echo "üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ GitHub..."
	local token
	if [[ -n "${GITHUB_TOKEN:-}" ]]; then
		token="${GITHUB_TOKEN}"
		echo "   - ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN."
	elif command -v gh &>/dev/null && gh auth status &>/dev/null; then
		token=$(gh auth token)
		echo "   - ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ GitHub CLI (gh)."
	else
		error "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ GitHub CLI ('gh auth login') –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GITHUB_TOKEN."
	fi

	echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	local repo=$(git remote get-url origin | sed -n 's/.*github.com[:\/]\([^.]*\)\.git/\1/p')
	[[ -z "$repo" ]] && error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏–∑ 'git remote get-url origin'."
	echo "   - ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repo}"

	echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ç–µ–≥–æ–≤..."
	local target_tag
	if [[ -n "${target_tag_arg}" ]]; then
		[[ "${target_tag_arg}" != "v"* ]] && target_tag_arg="v${target_tag_arg}"
		if ! git rev-parse -q --verify "refs/tags/${target_tag_arg}" &>/dev/null; then
			error "–¢–µ–≥ '${target_tag_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."
		fi
		target_tag="${target_tag_arg}"
		echo "   - ‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–≥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: ${target_tag}"
	else
		target_tag=$(git describe --tags --abbrev=0)
		echo "   - ‚ÑπÔ∏è –ê—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥: ${target_tag}"
	fi

	local previous_tag=$(git describe --tags --abbrev=0 "${target_tag}^" 2>/dev/null || git rev-list --max-parents=0 HEAD | head -n 1)
	echo "   - ‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç ${previous_tag} –¥–æ ${target_tag}"

	echo "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ —á–µ—Ä–µ–∑ API..."
	local response_body=$(curl -s \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: Bearer ${token}" \
		"https://api.github.com/repos/${repo}/compare/${previous_tag}...${target_tag}"
	)

	if echo "${response_body}" | jq -e '.message' > /dev/null; then
		error "API GitHub –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: $(echo "${response_body}" | jq -r '.message')"
	fi

	local all_commits=$(echo "${response_body}" | jq -r \
		'.commits[] | "* " + (.commit.message | split("\n")[0]) + " ([" + .author.login + "](https://github.com/" + .author.login + "))"'
	)

	if [[ -z "${all_commits}" ]]; then
		echo "‚ö™Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
		exit 0
	fi
	echo "   - ‚úÖ –ö–æ–º–º–∏—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã."

	echo "üîç –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤..."
	local commits=$(echo "${all_commits}" | awk '!seen[$0]++')
	echo "   - ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã."

	echo "üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
	local changelog_content=""
	local section_content
	section_content=$(get_commits "^\* feat" "" "${commits}") && changelog_content+="### üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n${section_content}\n\n"
	section_content=$(get_commits "^\* fix" "fix\(ci\)" "${commits}") && changelog_content+="### üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n${section_content}\n\n"
	section_content=$(get_commits "^\* docs" "" "${commits}") && changelog_content+="### üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n${section_content}\n\n"
	section_content=$(get_commits "^\* ci|fix\(ci\)|chore\(ci\)|chore\(release\)" "" "${commits}") && changelog_content+="### ‚öôÔ∏è CI/CD\n${section_content}\n\n"
	section_content=$(get_commits "^\* chore" "chore\(ci\)|chore\(release\)" "${commits}") && changelog_content+="### üîß –ü—Ä–æ—á–µ–µ\n${section_content}\n\n"

	local changelog_link
	if [[ "${previous_tag}" == v* ]]; then
		changelog_link="https://github.com/${repo}/compare/${previous_tag}...${target_tag}"
	else
		changelog_link="https://github.com/${repo}/commits/${target_tag}"
	fi
	changelog_content+="**Full Changelog**: ${changelog_link}"
	echo "   - ‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."

	if [[ -n "${output_file}" ]]; then
		echo -e "${changelog_content}" > "${output_file}"
		echo "   - ‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${output_file}"
	else
		echo && echo -e "${changelog_content}"
	fi
}

main "$@"
