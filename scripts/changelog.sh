#!/usr/bin/env bash
set -euo pipefail

function usage() {
	echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [-t <tag>] [-o <output_file>] [-h]"
	echo "  -t <tag>            –¢–µ–≥, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è changelog (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥)."
	echo "  -o <output_file>    –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: –≤—ã–≤–æ–¥ –Ω–∞ —ç–∫—Ä–∞–Ω)."
	echo "  -h                  –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
}

function error() {
	echo "‚ùå –û—à–∏–±–∫–∞: $1" >&2
	exit 1
}

function check_deps() {
	local missing_deps=0
	for dep in jq git curl awk; do
		if ! command -v "${dep}" &>/dev/null; then
			echo "‚ùå –£—Ç–∏–ª–∏—Ç–∞ '${dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞." >&2
			missing_deps=1
		fi
	done
	if [[ ${missing_deps} -eq 1 ]]; then
		exit 1
	fi
}

function deduplicate_and_format_commits() {
	local all_commits="$1"
	local formatted_commits=""
	declare -A seen_hashes
	declare -A seen_messages
	declare -A github_authors

	while IFS='|' read -r hash message author; do
		[[ -z "${hash}" ]] && continue
		if [[ "${author}" =~ ^[a-zA-Z0-9_-]+$ ]]; then
			github_authors["${hash}"]="([${author}](https://github.com/${author}))"
		fi
	done <<< "${all_commits}"

	while IFS='|' read -r hash message author; do
		[[ -z "${hash}" ]] && continue
		if [[ -n "${seen_hashes[${hash}]:-}" ]] || [[ -n "${seen_messages[${message}]:-}" ]]; then
			continue
		fi
		seen_hashes["${hash}"]=1
		seen_messages["${message}"]=1

		local author_info
		if [[ -n "${github_authors[${hash}]:-}" ]]; then
			author_info="${github_authors[${hash}]}"
		else
			author_info="(${author})"
		fi

		formatted_commits+="* ${message} ${author_info}"$'\n'
	done <<< "${all_commits}"

	echo "${formatted_commits}"
}

function get_commits() {
	local include_pattern="$1"
	local exclude_pattern="${2:-}"
	local all_commits="$3"
	local commits=$(echo "${all_commits}" | grep -E "${include_pattern}" || true)
	if [[ -n "${exclude_pattern}" ]]; then
		commits=$(echo "${commits}" | grep -E -v "${exclude_pattern}" || true)
	fi
	[[ -n "${commits}" ]] && echo "${commits}"
}

function get_github_commits() {
	local repo="$1"
	local token="$2"
	local from_ref="$3"
	local to_ref="$4"

	local response_body=$(curl -s \
		-H "Accept: application/vnd.github.v3+json" \
		-H "Authorization: Bearer ${token}" \
		"https://api.github.com/repos/${repo}/compare/${from_ref}...${to_ref}"
	)

	if echo "${response_body}" | jq -e '.message' > /dev/null; then
		local error_msg=$(echo "${response_body}" | jq -r '.message')
		if [[ "${error_msg}" == "Not Found" ]]; then
			echo "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ GitHub API. –í–æ–∑–º–æ–∂–Ω–æ, –æ–¥–∏–Ω –∏–∑ —Ç–µ–≥–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —É–¥–∞–ª–µ–Ω–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏." >&2
			return 1
		else
			error "API GitHub –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: ${error_msg}"
		fi
	fi

	echo "${response_body}" | jq -r '.commits[] | .sha[0:7] + "|" + (.commit.message | split("\n")[0]) + "|" + .author.login'
}

function get_local_commits() {
	local from_ref="$1"
	local to_ref="$2"
	git log --no-merges --pretty=format:"%h|%s|%an" "${from_ref}".."${to_ref}" 2>/dev/null || true
}

function main() {
	local output_file=""
	local target_tag_arg=""

	while getopts ":o:t:h" opt; do
		case ${opt} in
			o ) output_file=${OPTARG};;
			t ) target_tag_arg=${OPTARG};;
			h ) usage; exit 0;;
			\? ) error "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–ª–∞–≥: -${OPTARG}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ -h –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏." ;;
			: ) error "–§–ª–∞–≥ -${OPTARG} —Ç—Ä–µ–±—É–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç (–∏–º—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–µ–≥–∞)." ;;
		esac
	done

	check_deps

	echo "üîç –ü–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞ GitHub..."
	local token
	if [[ -n "${GITHUB_TOKEN:-}" ]]; then
		token="${GITHUB_TOKEN}"
		echo "   - ‚úÖ –ù–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_TOKEN."
	elif command -v gh &>/dev/null && gh auth status &>/dev/null; then
		token=$(gh auth token)
		echo "   - ‚úÖ –ù–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ GitHub CLI (gh)."
	else
		echo "   - ‚ö†Ô∏è  –¢–æ–∫–µ–Ω GitHub –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã."
	fi

	echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
	local repo
	if [[ -n "${GITHUB_REPOSITORY:-}" ]]; then
		repo="${GITHUB_REPOSITORY}"
		echo "   - ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –Ω–∞–π–¥–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GITHUB_REPOSITORY: ${repo}"
	else
		repo=$(git remote get-url origin | sed -n 's/.*github.com[:\/]\([^.]*\)\.git/\1/p')
		if [[ -z "$repo" ]]; then
			echo "   - ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π. –ë—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã."
		fi
		echo "   - ‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ git remote: ${repo}"
	fi

	echo "üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞..."
	local target_tag
	local previous_tag
	if [[ -n "${target_tag_arg}" ]]; then
		[[ "${target_tag_arg}" != "v"* ]] && target_tag_arg="v${target_tag_arg}"
		if ! git rev-parse -q --verify "refs/tags/${target_tag_arg}" &>/dev/null; then
			error "–¢–µ–≥ '${target_tag_arg}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏."
		fi
		target_tag="${target_tag_arg}"
		previous_tag=$(git describe --tags --abbrev=0 "${target_tag}^" 2>/dev/null || git rev-list --max-parents=0 HEAD | head -n 1)
		echo "   - ‚ÑπÔ∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–≥ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞: ${target_tag}"
		echo "   - ‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç ${previous_tag} –¥–æ ${target_tag}"
	else
		if ! git describe --tags --abbrev=0 &>/dev/null; then
			echo "   - ‚ÑπÔ∏è  –¢–µ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ –∫–æ–º–º–∏—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
			previous_tag=$(git rev-list --max-parents=0 HEAD | head -n 1)
			target_tag="HEAD"
		else
			local latest_tag=$(git describe --tags --abbrev=0)
			local commits_after_tag=$(git rev-list "${latest_tag}..HEAD" --count 2>/dev/null || echo "0")
			if [[ "${commits_after_tag}" -gt 0 ]]; then
				echo "   - ‚ÑπÔ∏è  –ù–∞–π–¥–µ–Ω–æ ${commits_after_tag} –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ ${latest_tag}"
				echo "   - ‚ÑπÔ∏è  –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è changelog –¥–ª—è –Ω–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
				previous_tag="${latest_tag}"
				target_tag="HEAD"
				echo "   - ‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç ${previous_tag} –¥–æ HEAD"
			else
				echo "   - ‚ÑπÔ∏è  –ö–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ç–µ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–≥: ${latest_tag}"
				target_tag="${latest_tag}"
				previous_tag=$(git describe --tags --abbrev=0 "${target_tag}^" 2>/dev/null || git rev-list --max-parents=0 HEAD | head -n 1)
				echo "   - ‚úÖ –î–∏–∞–ø–∞–∑–æ–Ω: –æ—Ç ${previous_tag} –¥–æ ${target_tag}"
			fi
		fi
	fi

	echo "üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤..."
	local all_commits=""
	echo "   - –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∫–æ–º–º–∏—Ç–æ–≤..."
	all_commits=$(get_local_commits "${previous_tag}" "${target_tag}")
	if [[ -n "${token}" && -n "${repo}" ]]; then
		echo "   - –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ GitHub API..."
		local github_commits=""
		if github_commits=$(get_github_commits "${repo}" "${token}" "${previous_tag}" "${target_tag}"); then
			echo "   - ‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ GitHub API –ø–æ–ª—É—á–µ–Ω—ã, –æ–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º–∏..."
			all_commits=$(printf "%s\n%s" "${all_commits}" "${github_commits}")
		else
			echo "   - ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ API, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–º–∏—Ç—ã"
		fi
	fi
	echo "   - ‚úÖ –ö–æ–º–º–∏—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."

	if [[ -z "${all_commits}" ]]; then
		echo "‚ö™Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ–º–º–∏—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏."
		exit 0
	fi

	echo "üîç –£–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤..."
	local commits=$(deduplicate_and_format_commits "${all_commits}")
	echo "   - ‚úÖ –î—É–±–ª–∏–∫–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã."

	echo "üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
	local changelog_content=""
	local section_content
	section_content=$(get_commits "^\* feat" "" "${commits}") && changelog_content+="### üöÄ –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\n${section_content}\n\n"
	section_content=$(get_commits "^\* fix" "fix\(ci\)" "${commits}") && changelog_content+="### üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n${section_content}\n\n"
	section_content=$(get_commits "^\* docs" "" "${commits}") && changelog_content+="### üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n${section_content}\n\n"
	section_content=$(get_commits "^\* ci|fix\(ci\)|chore\(ci\)|chore\(release\)" "" "${commits}") && changelog_content+="### ‚öôÔ∏è CI/CD\n${section_content}\n\n"
	section_content=$(get_commits "^\* chore" "chore\(ci\)|chore\(release\)" "${commits}") && changelog_content+="### üîß –ü—Ä–æ—á–µ–µ\n${section_content}\n\n"

	local changelog_link
	if [[ "${previous_tag}" == v* ]]; then
		changelog_link="https://github.com/${repo}/compare/${previous_tag}...${target_tag}"
	else
		changelog_link="https://github.com/${repo}/commits/${target_tag}"
	fi
	changelog_content+="**Full Changelog**: ${changelog_link}"
	echo "   - ‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω."

	if [[ -n "${output_file}" ]]; then
		echo -e "${changelog_content}" > "${output_file}"
		echo "   - ‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: ${output_file}"
	else
		echo && echo -e "${changelog_content}"
	fi
}

main "$@"
