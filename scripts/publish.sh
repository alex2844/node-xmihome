#!/usr/bin/env bash
set -euo pipefail

readonly PACKAGES_DIR="packages"
readonly NODERED_FLOWS_URL="https://flows.nodered.org/add/node"

function error() {
	echo "‚ùå –û—à–∏–±–∫–∞: $1" >&2
	exit 1
}

function check_deps() {
	local missing_deps=0
	for dep in jq bun curl; do
		if ! command -v "${dep}" &>/dev/null; then
			echo "‚ùå –£—Ç–∏–ª–∏—Ç–∞ '${dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞." >&2
			missing_deps=1
		fi
	done
	if [[ ${missing_deps} -eq 1 ]]; then
		exit 1
	fi
}

function refresh_nodered_flow() {
	local pkg_file="$1"
	local pkg_name=$(jq -r '.name' "${pkg_file}")
	echo "   - üü° –≠—Ç–æ –ø–∞–∫–µ—Ç Node-RED. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ flows.nodered.org..."
	local headers_file=$(mktemp)
	local response_body=$(curl -s -D "${headers_file}" "${NODERED_FLOWS_URL}")
	local cookie=$(grep -oP '_csrf=.*?;' "${headers_file}" | head -n 1 || true)
	local csrf_token=$(echo "${response_body}" | grep -oP 'name="_csrf" type="hidden" value="\K[^"]+' || true)
	rm -f "${headers_file}"
	if [[ -z "${cookie}" ]] || [[ -z "${csrf_token}" ]]; then
		echo "   - ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å CSRF-—Ç–æ–∫–µ–Ω –∏–ª–∏ cookie —Å —Å–∞–π—Ç–∞ Node-RED. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ."
		return
	fi
	local post_response=$(
		curl -sL -X POST \
			-H "cookie: ${cookie}" \
			--data-urlencode "_csrf=${csrf_token}" \
			--data-urlencode "module=${pkg_name}" \
			"${NODERED_FLOWS_URL}"
	)
	if [[ "${post_response,,}" == *"added"* ]] || [[ "${post_response,,}" == *"updated"* ]]; then
		echo "   - ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ Node-RED Flows –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
	else
		echo "   - ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å –≤ Node-RED. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
		echo "   - –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: ${post_response}"
	fi
}

function process_package() {
	local version="$2"
	local pkg_dir="$1"
	local pkg_file="${pkg_dir}/package.json"
	echo "üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞: ${pkg_dir}"
	local json=$(jq --tab --arg version "${version}" '.version = $version' "${pkg_file}")
	echo "${json}" >"${pkg_file}"
	if [[ "$(jq -r '.private // false' "${pkg_file}")" != "true" ]]; then
		echo "   - üì¶ –ü–∞–∫–µ—Ç –ø—É–±–ª–∏—á–Ω—ã–π. –ü—É–±–ª–∏–∫–∞—Ü–∏—è..."
		(cd "${pkg_dir}" && bun publish)
		echo "   - ‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω."
		if jq -e '."node-red"' "${pkg_file}" >/dev/null; then
			refresh_nodered_flow "${pkg_file}"
		fi
	else
		echo "   - ‚ö™Ô∏è –ü–∞–∫–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ–ø—É—â–µ–Ω–∞."
	fi
}

function main() {
	echo "üîç –†–∞–±–æ—Ç–∞–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞: ${PWD}"
	check_deps
	if [[ ! -f "package.json" ]]; then
		error "–ö–æ—Ä–Ω–µ–≤–æ–π —Ñ–∞–π–ª 'package.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –º–æ–Ω–æ—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."
	fi
	echo "‚ÑπÔ∏è  –ß—Ç–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ package.json..."
	local version=$(jq -r '.version // empty' package.json)
	if [[ -z "${version}" ]]; then
		error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–µ 'version' –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ package.json."
	fi
	echo "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ—Ä–Ω–µ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${version}"
	echo
	for pkg_dir in "${PACKAGES_DIR}"/*; do
		if [[ -d "${pkg_dir}" && -f "${pkg_dir}/package.json" ]]; then
			process_package "${pkg_dir}" "${version}"
			echo
		fi
	done
	echo "üéâ –°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É."
}

main "$@"
