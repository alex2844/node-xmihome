#!/usr/bin/env bash
set -euo pipefail

readonly PROMPT_FILE="docs/GEMINI.md"
readonly OUTPUT_SCRIPT="scripts/docs_apply.sh"
readonly EXCLUDE_FILES_PATTERNS=("LICENSE" ".gitignore" "${PROMPT_FILE}" "${OUTPUT_SCRIPT}" "${0#./}")
readonly MODEL_ID="gemini-2.5-pro"

function error() {
	echo "‚ùå –û—à–∏–±–∫–∞: $1" >&2
	exit 1
}

function check_deps() {
	local missing_deps=0
	for dep in git curl jq base64; do
		if ! command -v "${dep}" &>/dev/null; then
			echo "‚ùå –£—Ç–∏–ª–∏—Ç–∞ '${dep}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –Ω–æ –æ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∫—Ä–∏–ø—Ç–∞." >&2
			missing_deps=1
		fi
	done
	if [[ ${missing_deps} -eq 1 ]]; then
		exit 1
	fi
}

function list_project_files() {
	git ls-files -c --others --exclude-standard
}

function process_file() {
	local relative_path="$1"
	echo "--- BEGIN FILE: ${relative_path} ---"

	local encoding=$(file -L -b --mime-encoding "${relative_path}")

	if [[ "${encoding}" == "binary" ]]; then
		echo "[Binary file, content not displayed]"
	else
		cat "${relative_path}" || echo "[Could not read file]"
	fi

	echo "--- END FILE: ${relative_path} ---"
	echo
}

function generate_request_json() {
	jq -n \
		--arg prompt_b64 "$1" \
		--arg context_b64 "$2" \
		'{
			"contents": [
				{
					"role": "user",
					"parts": [
						{
							"inlineData": { "mimeType": "text/plain", "data": $prompt_b64 }
						}, {
							"inlineData": { "mimeType": "text/plain", "data": $context_b64 }
						}
					]
				}
			],
			"generationConfig": {
				"responseMimeType": "text/plain"
			}
		}'
}

function main() {
	echo "üîç –†–∞–±–æ—Ç–∞–µ–º –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞: ${PWD}"

	check_deps
	if [[ -z "${GEMINI_API_KEY:-}" ]]; then
		error "–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GEMINI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
	fi
	if [[ ! -f "${PROMPT_FILE}" ]]; then
		error "–§–∞–π–ª —Å –ø—Ä–æ–º–ø—Ç–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω: '${PROMPT_FILE}'"
	fi

	echo "üì¶ –°–æ–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø–∞–º—è—Ç—å..."
	local project_context=""
	while IFS= read -r relative_path; do
		[[ -z "${relative_path}" ]] && continue

		local should_skip=false
		for pattern in "${EXCLUDE_FILES_PATTERNS[@]}"; do
			if [[ "${relative_path}" == ${pattern} ]]; then
				should_skip=true
				break
			fi
		done
		[[ "${should_skip}" == true ]] && continue

		project_context+="$(process_file "${relative_path}")"
	done < <(list_project_files | sort)

	echo "‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–±—Ä–∞–Ω. –û–±—ä–µ–º: $(echo -n "${project_context}" | wc -c) –±–∞–π—Ç."
	echo "ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Gemini AI (–º–æ–¥–µ–ª—å: ${MODEL_ID})... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."

	local prompt_base64=$(base64 -w0 < "${PROMPT_FILE}")
	local context_base64=$(base64 -w0 <<< "${project_context}")
	local request_json=$(generate_request_json "${prompt_base64}" "${context_base64}")
	local api_url="https://generativelanguage.googleapis.com/v1beta/models/${MODEL_ID}:generateContent?key=${GEMINI_API_KEY}"

	local response
	if ! response=$(curl -s -X POST -H "Content-Type: application/json" --data-binary @- "${api_url}" <<< "${request_json}" 2>&1); then
		error "–ó–∞–ø—Ä–æ—Å –∫ Gemini API –Ω–µ —É–¥–∞–ª—Å—è. –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:\n${response}"
	fi
	if ! echo "${response}" | jq -e '.candidates[0].content.parts[0].text' > /dev/null; then
		error "–ü–æ–ª—É—á–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç Gemini (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç). –û—Ç–≤–µ—Ç API:\n${response}"
	fi

	local generated_script=$(echo "${response}" | jq -r '.candidates[0].content.parts[0].text' \
		| sed -e '1s/^```\(bash\|sh\)$//' -e '$s/^```$//' \
		| sed -e '/./,$!d' \
		| tee "${OUTPUT_SCRIPT}"
	)
	if [[ -z "${generated_script}" ]]; then
		error "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –æ—Ç Gemini. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç API:\n${response}"
	fi

	chmod +x "${OUTPUT_SCRIPT}"
	echo "‚úÖ –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: ${OUTPUT_SCRIPT}"
}

main "$@"
